name: Art-UI - Build n Deploy

on:
  push:
    branches:
      - main
      - develop
      - stage

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: tag
        run: echo "TAG_NAME=$(echo ${GITHUB_REF##*/}-${GITHUB_SHA})" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/art-ui:$IMAGE_TAG -t $ECR_REGISTRY/art-ui:${{ env.TAG_NAME }} .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/art-ui --all-tags

  deploy:
    needs: build
    name: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Open VPN
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt install openvpn
          echo "${{secrets.OPENVPN_CONF}}" > deploy/config.ovpn

      - name: Connect VPN
        uses: golfzaptw/action-connect-ovpn@master
        id: connect_vpn
        with:
          PING_URL: 10.0.1.238
          FILE_OVPN: 'deploy/config.ovpn'
        env:
          CA_CRT: ${{ secrets.OPENVPN_CA_CERT }}
          USER_CRT: ${{ secrets.OPENVPN_USER_CERT }}
          USER_KEY: ${{ secrets.OPENVPN_USER_KEY }}

      - name: Check Connect VPN
        run:  echo ${{ steps.connect_vpn.outputs.STATUS }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          export KUBECONFIG=${HOME}/.kube/config
          mkdir ${HOME}/.kube
          echo $KUBE_CONFIG_DATA | base64 --decode >> ${HOME}/.kube/config
          echo "TAG_NAME=$(echo ${GITHUB_REF##*/}-${GITHUB_SHA})" >> $GITHUB_ENV
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

      - name: deploy to cluster prod-check
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          NAMESPACE: "production"
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: kubectl set image deployment/art-ui art-ui=$ECR_REGISTRY/art-ui:${{ env.TAG_NAME }} -n $NAMESPACE --record

      - name: deploy to cluster stage-check
        if: ${{ github.ref == 'refs/heads/stage' }}
        env:
          NAMESPACE: "staging"
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: kubectl set image deployment/art-ui art-ui=$ECR_REGISTRY/art-ui:${{ env.TAG_NAME }} -n $NAMESPACE --record

      - name: deploy to cluster dev-check
        if: ${{ github.ref == 'refs/heads/develop' }}
        env:
          NAMESPACE: "development"
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: kubectl set image deployment/art-ui art-ui=$ECR_REGISTRY/art-ui:${{ env.TAG_NAME }} -n $NAMESPACE --record

      - name: kill vpn
        if: always()
        run: sudo killall openvpn

      - name: Send Slack Notification
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        uses: rtCamp/action-slack-notify@v2
        with:
          SLACK_COLOR: '${{ job.status }}'
          SLACK_MESSAGE: '${{github.GITHUB_REPOSITORY}}: Build has ${{ job.status }}'
